"""
Django settings for Econome project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
import os
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('secret_key')

# SECURITY WARNING: don't run with debug turned on in production!
ENVIRONMENT = os.getenv("ENVIRONMENT", "DEV")
DEBUG = os.getenv("DEBUG") == "True"

APP_NAME = os.getenv("APP_NAME", "WEB")
MAIN_URL = os.getenv("WEB_PROTOCOL", "http") + "://" + os.getenv('URL', "econome.codeany.org")
LOGIN_REDIRECT_URL = 'main-home'

ALLOWED_HOSTS = []
ALLOWED_HOSTS_ENV = os.getenv('ALLOWED_HOSTS')
if ALLOWED_HOSTS_ENV:
    ALLOWED_HOSTS.extend(ALLOWED_HOSTS_ENV.split(','))

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'main.apps.MainConfig',
    'crispy_forms',
    'users.apps.UsersConfig',
    'deals.apps.DealsConfig',
    "corsheaders",
    'captcha',
    'drf_recaptcha',
    'drf_yasg',
    'storages',
    'rest_framework_simplejwt',
    'rest_framework',
    'rest_framework.authtoken',
    'api.apps.ApiConfig',
    'adminPanel.apps.AdminpanelConfig'


]


MIDDLEWARE = [
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = 'econome.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

LOCALE_PATHS = (os.path.join(BASE_DIR, 'locale'),)

WSGI_APPLICATION = 'econome.wsgi.application'

SESSION_COOKIE_AGE = timedelta(weeks=2).total_seconds()

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

SESSION_COOKIE_AGE = timedelta(weeks=2).total_seconds()

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(seconds=SESSION_COOKIE_AGE),
    'REFRESH_TOKEN_LIFETIME': timedelta(seconds=SESSION_COOKIE_AGE),
}


CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_HEADERS = [
    "Token",
    "token",
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]
CORS_ALLOW_CREDENTIALS = True

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('database_name'),
        'USER': os.getenv('database_user'),
        'PASSWORD': os.getenv('database_pass'),
        'HOST': os.getenv('database_host')
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.RegularUser'


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en'

LANGUAGES = [
    ("en", _("English")),
    ("ru", _("Russian")),
    ("az", _("Azerbaijani")),
]

TIME_ZONE = 'Asia/Baku'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Session config
# SESSION_COOKIE_AGE = 1209600  # DEFAULT SESSION AGE OF 2 WEEKS
# SESSION_COOKIE_SECURE = True
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/


CRISPY_TEMPLATE_PACK = 'bootstrap4'

STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
MEDIA_ROOT = os.path.join(BASE_DIR, "mediafiles")

STATIC_URL = "/static/"
MEDIA_URL = '/mediafiles/'
    

# Email
EMAIL_BACKEND = os.getenv('backend_email')
EMAIL_HOST = os.getenv('host_email')
EMAIL_HOST_USER = os.getenv('mail_user')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = os.getenv('password_mail')
EMAIL_PORT = 587
EMAIL_USE_TLS = True

# Redis Settings
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = os.getenv("REDIS_PORT")
REDIS_DB = os.getenv("REDIS_DB", 1)
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
REDIS_HOST_FOR_CELERY = REDIS_HOST
if REDIS_PASSWORD:
    REDIS_HOST_FOR_CELERY = f":{REDIS_PASSWORD}@{REDIS_HOST}"

# LSIM Config
LSIM_USER = os.getenv("LSIM_USER")
LSIM_PASSWORD = os.getenv("LSIM_PASSWORD")

# Recaptcha Config
RECAPTCHA_PUBLIC_KEY = os.getenv('RECAPTCHA_PUBLIC')
RECAPTCHA_PRIVATE_KEY = os.getenv('RECAPTCHA_PRIVATE')
DRF_RECAPTCHA_SECRET_KEY = os.getenv('RECAPTCHA_PRIVATE')
if os.getenv("DEBUG") == "True":
    SILENCED_SYSTEM_CHECKS = ['captcha.recaptcha_test_key_error']

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SITE_ID = 1

# Logging
if APP_NAME != "CELERY":
    # Logging
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "simple": {
                "format": "{levelname}  {asctime} {module} {message}",
                "style": "{",
            }
        },
        "handlers": {
            "console": {
                "level": "DEBUG",
                "class": "logging.StreamHandler",
            },
            "file": {
                "level": "DEBUG",
                "class": "logging.FileHandler",
                "filename": os.path.join(BASE_DIR, "debug.log"),
                "formatter": "simple",
            },
        },
        "loggers": {
            "django.db.backends": {
                "level": "DEBUG",
                "handlers": ["console", "file"],
            },
            "falcon.handlers": {
                "level": "DEBUG",
                "handlers": ["console", "file"],
            },
            "django.request": {
                "level": "DEBUG",
                "handlers": ["console", "file"],
            },
        },
    }
